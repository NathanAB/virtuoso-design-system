#!/usr/bin/env node -r dotenv/config
const fs = require('fs');
const path = require('path');
const { Client } = require('abstract-sdk');

const {
  ABSTRACT_API_TOKEN,
  ABSTRACT_ORG_ID,
  ABSTRACT_PROJECT_ID,
  ABSTRACT_COLLECTION_ID,
} = process.env;

const ABSTRACT_CACHE_FILE = path.resolve(
  path.join(__dirname, '..', '.storybook', 'abstract_layers_cache.json'),
);

class RunError extends Error {
  /**
   * Constructor
   *
   * @param msg the error message
   * @param err the error driving
   */
  constructor(msg, err = null) {
    super(msg);
    this.message = msg;
    this.err = err;
  }
}

class MultiErrors extends Error {
  /**
   * Constructor
   *
   * @param msg the error message
   * @param err the error driving
   */
  constructor(errors) {
    super('Multiple Errors');
    this.errors = errors;
  }
}

/**
 * Async For Each
 *
 * @param array array
 * @param callback callback
 */
async function asyncForEach(array, callback) {
  for (let index = 0; index < array.length; index++) {
    await callback(array[index], index, array);
  }
}

/**
 * Run script
 */
async function run() {
  const client = new Client({
    accessToken: ABSTRACT_API_TOKEN,
  });

  // Get collection
  let collection;
  try {
    collection = await client.collections.info({
      projectId: ABSTRACT_PROJECT_ID,
      branchId: 'master',
      collectionId: ABSTRACT_COLLECTION_ID,
    });
  } catch (e) {
    throw new RunError('Could not get collections', e);
  }

  // Get layers
  let layers;
  const errors = [];

  await asyncForEach(collection.layers, async collectionLayer => {
    try {
      let layer;
      try {
        layer = await client.layers.info({
          projectId: ABSTRACT_PROJECT_ID,
          branchId: 'master',
          fileId: collectionLayer.fileId,
          layerId: collectionLayer.layerId,
          sha: collectionLayer.sha,
        });
      } catch (e) {
        throw new RunError('Could not get layers', e);
      }

      // Create shares
      let share;
      try {
        share = await client.shares.create(
          {
            organizationId: ABSTRACT_ORG_ID,
          },
          {
            kind: 'layer',
            projectId: layer.projectId,
            branchId: 'master',
            fileId: layer.fileId,
            pageId: layer.pageId,
            layerId: layer.id,
            sha: layer.sha,
          },
        );
      } catch (e) {
        throw new RunError(`Could not create share for ${layer.id}`, e);
      }

      layers.push({ ...layer, share });
    } catch (e) {
      errors.push(e);
    }
  });

  if (errors.length) {
    throw new MultiErrors(errors);
  }

  // Save to cache
  fs.writeFileSync(
    ABSTRACT_CACHE_FILE,
    JSON.stringify(
      {
        collection,
        layers,
      },
      null,
      '    ',
    ),
  );
}

run().catch(e => {
  console.error('Error: ', e.message);
  if (e.errors) {
    e.errors.forEach(error => console.error('Error', error.message));
  }
});
